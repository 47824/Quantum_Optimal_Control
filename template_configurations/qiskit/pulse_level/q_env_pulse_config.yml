SERVICE: # Relevant only when using the Qiskit runtime service
  CHANNEL: "ibm_quantum"
  INSTANCE: "ibm-q-nus/default/default"

RUNTIME_OPTIONS: # Relevant only when using the Qiskit runtime service
  optimization_level: 0
  resilience_level: null
  max_execution_time: null
  transpilation:
    skip_transpilation: False
    initial_layout: [ 15, 4 ]
    approximation_degree: null
    layout_method: null
    routing_method: null
  resilience:
    extrapolator: null
    noise_amplifier: null
    noise_factors: null
  environment:
    log_level: "WARNING"
    job_tags: null
  simulator:
    seed_simulator: 100
    coupling_map: null
    basis_gates: null

BACKEND: # Backend configuration (If all set to None, the user needs to specify its own backend in q_env_config.py's get_backend() function)
  REAL_BACKEND: False # True: real or False: fake Aer backend
  NAME: 'fake_jakarta' # Name of the backend
  DYNAMICS: # Use a DynamicsBackend (if fields above are not null, build a DynamicsBackend.from_backend() with the specified backend)
    USE_DYNAMICS: True # Whether to use a DynamicsBackend
    PHYSICAL_QUBITS: [ 0, 1 ] # qubit indices of the device to be used for modelling the system
    SOLVER_OPTIONS:
      method: "jax_odeint"
      atol: 1e-5
      rtol: 1e-7
      hmax: 'auto' # Maximum step size, if 'auto' the solver will automatically determine the step size with backend.dt


TARGET: # Target Gate configuration
  GATE: "ECR" # Gate to be implemented (if null, the target state should be specified)
  # STATE: "0" # Target state (if GATE is null)
  PHYSICAL_QUBITS: [ 0, 1 ] # qubit indices for the target gate (qubits for which the gate should be calibrated)

ENV: # Environment configuration
  SAMPLING_PAULIS: 100 # Number of Pauli strings to sample
  N_SHOTS: 1
  C_FACTOR: 0.5 # Cost factor for the reward function
  N_ACTIONS: 4 # Action vector length
  BATCH_SIZE: 256 # Number of actions to evaluate per policy iteration
  ACTION_SPACE:
    LOW: [ -1., -3.14, -1, -3.14 ]
    HIGH: [ 1., 3.14, 1, 3.14 ]
  OBSERVATION_SPACE: 1 # Shape of the observation space
  BENCHMARK_CYCLE: 10 # Number of steps between two fidelity benchmarks
  SEED: 100
  CHECK_ON_EXP: True # Whether to perform fidelity benchmarking with tomographic experiments or just using simulation
  TRAINING_WITH_CAL: False
  CALIBRATION_FILES: "CustomDynamicsBackend.json"
