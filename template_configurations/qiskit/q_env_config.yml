SERVICE: # Relevant only when using the Qiskit runtime service
  CHANNEL: "ibm_quantum"
  INSTANCE: 'ibm-q-nus/default/default'

RUNTIME_OPTIONS: # Relevant only when using the Qiskit runtime service
  optimization_level: 3
  resilience_level: null
  max_execution_time: null
  transpilation:
    skip_transpilation: False
    initial_layout: null
    approximation_degree: null
    layout_method: null
    routing_method: null
  resilience:
    extrapolator: null
    noise_amplifier: null
    noise_factors: null
  environment:
    log_level: 'WARNING'
    job_tags: null
  simulator:
    seed_simulator: 100
    coupling_map: null
    basis_gates: null

BACKEND: # Backend configuration (If all set to None, the user needs to specify its own backend in q_env_config.py's get_backend() function)
  REAL_BACKEND: null  # True: real or False: fake Aer backend
  NAME: null  # Name of the backend
  DYNAMICS: # Use a DynamicsBackend (if fields above are not null, build a DynamicsBackend.from_backend() with the specified backend)
    USE_DYNAMICS: True # Whether to use a DynamicsBackend
    PHYSICAL_QUBITS: null  # Number of qubits characterizing the environment (i.e. the full quantum circuit dimension)

TARGET: # Target Gate configuration
  GATE: "CX"
  PHYSICAL_QUBITS: [ 0, 1 ]

ENV: # Environment configuration
  SAMPLING_PAULIS: 100 # Number of Pauli strings to sample
  N_SHOTS: 1
  C_FACTOR: 1. # Cost factor for the reward function
  N_ACTIONS: 7
  BATCH_SIZE: 1 # Number of actions to evaluate per policy iteration
  ACTION_SPACE:
    LOW: [ -1., -1., -1., -1., -1., -1., -1. ]
    HIGH: [ 1., 1., 1., 1., 1., 1., 1. ]
  OBSERVATION_SPACE: 2  # Shape of the observation space
  BENCHMARK_CYCLE: 1  # Number of steps between two fidelity benchmarks
  SEED: 100










